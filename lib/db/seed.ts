import { config } from 'dotenv';

// Load environment variables before any other imports
config();

import { db } from './drizzle';
import {
  users,
  teams,
  teamMembers,
  activityLogs,
  suppliers,
  products,
  kitchenPeriodDemands
} from './schema';
import { hashPassword } from '@/lib/auth/session';

async function seedQuoteMasterFoundation() {
  console.log("üå± Seeding QuoteMaster Foundation...");

  // 1. Create Super Admin User
  const [superAdmin] = await db.insert(users).values({
    name: "QuoteMaster Admin",
    email: "admin@quotemaster.local",
    passwordHash: await hashPassword("admin123!"),
    employeeCode: "QM001",
    phone: "0901234567",
    role: "owner"
  }).returning();

  console.log("‚úÖ Created super admin user");

  // 2. Create Additional Manager Users
  const [procurementManager] = await db.insert(users).values({
    name: "Nguy·ªÖn VƒÉn H√πng",
    email: "hung.procurement@quotemaster.local",
    passwordHash: await hashPassword("manager123!"),
    employeeCode: "PM001",
    phone: "0912345001",
    role: "procurement_manager"
  }).returning();

  const [kitchenManager1] = await db.insert(users).values({
    name: "Tr·∫ßn Th·ªã B√≠ch",
    email: "bich.kitchen@quotemaster.local",
    passwordHash: await hashPassword("manager123!"),
    employeeCode: "KM001",
    phone: "0912345002",
    role: "kitchen_manager"
  }).returning();

  const [kitchenManager2] = await db.insert(users).values({
    name: "L√™ VƒÉn C∆∞·ªùng",
    email: "cuong.kitchen@quotemaster.local",
    passwordHash: await hashPassword("manager123!"),
    employeeCode: "KM002",
    phone: "0912345003",
    role: "kitchen_manager"
  }).returning();

  // 3. Create Non-Manager User (Kitchen Staff)
  const [kitchenStaff] = await db.insert(users).values({
    name: "Ph·∫°m Th·ªã Duy√™n",
    email: "duyen.staff@quotemaster.local",
    passwordHash: await hashPassword("staff123!"),
    employeeCode: "KS001",
    phone: "0912345004",
    role: "kitchen_staff"
  }).returning();

  console.log("‚úÖ Created additional users (managers and staff)");

  // 4. Create Office Team (for departments)
  const [officeTeam] = await db.insert(teams).values({
    name: "VƒÉn Ph√≤ng Trung T√¢m",
    teamType: "OFFICE",
    region: "Trung T√¢m",
    address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
    managerId: superAdmin.id // Assign super admin as office manager
  }).returning();

  console.log("‚úÖ Created office team");

  // 5. Create Enhanced Kitchen Teams with Diverse Scenarios
  const kitchenTeams = await db.insert(teams).values([
    {
      name: "B·∫øp Trung T√¢m",
      teamType: "KITCHEN",
      kitchenCode: "BEP001",
      region: "Trung T√¢m",
      address: "456 ƒê∆∞·ªùng DEF, Qu·∫≠n 3, TP.HCM",
      managerId: kitchenManager1.id, // Assigned to Tr·∫ßn Th·ªã B√≠ch
      status: "active"
    },
    {
      name: "B·∫øp Th·ªß ƒê·ª©c",
      teamType: "KITCHEN",
      kitchenCode: "BEP002",
      region: "Th·ªß ƒê·ª©c",
      address: "789 ƒê∆∞·ªùng GHI, Th·ªß ƒê·ª©c, TP.HCM",
      managerId: kitchenManager2.id, // Assigned to L√™ VƒÉn C∆∞·ªùng
      status: "active"
    },
    {
      name: "B·∫øp T√¢n B√¨nh",
      teamType: "KITCHEN",
      kitchenCode: "BEP003",
      region: "T√¢n B√¨nh",
      address: "321 ƒê∆∞·ªùng JKL, T√¢n B√¨nh, TP.HCM",
      managerId: procurementManager.id, // Assigned to Nguy·ªÖn VƒÉn H√πng
      status: "active"
    },
    {
      name: "B·∫øp Qu·∫≠n 7",
      teamType: "KITCHEN",
      kitchenCode: "BEP004",
      region: "Qu·∫≠n 7",
      address: "654 ƒê∆∞·ªùng MNO, Qu·∫≠n 7, TP.HCM",
      managerId: null, // NO MANAGER ASSIGNED - Testing scenario
      status: "active"
    },
    {
      name: "B·∫øp B√¨nh Th·∫°nh (T·∫°m d·ª´ng)",
      teamType: "KITCHEN",
      kitchenCode: "BEP005",
      region: "B√¨nh Th·∫°nh",
      address: "987 ƒê∆∞·ªùng PQR, B√¨nh Th·∫°nh, TP.HCM",
      managerId: kitchenManager1.id, // Assigned but inactive kitchen
      status: "inactive" // INACTIVE KITCHEN - Testing scenario
    },
    {
      name: "B·∫øp G√≤ V·∫•p",
      teamType: "KITCHEN",
      kitchenCode: "BEP006",
      region: "G√≤ V·∫•p",
      address: "147 ƒê∆∞·ªùng STU, G√≤ V·∫•p, TP.HCM",
      managerId: kitchenManager2.id, // Multiple kitchens per manager
      status: "active"
    }
  ]).returning();

  console.log("‚úÖ Created enhanced kitchen teams with diverse scenarios");

  // 6. Assign All Users to Office Team with Appropriate Roles
  await db.insert(teamMembers).values([
    {
      userId: superAdmin.id,
      teamId: officeTeam.id,
      role: "ADMIN_SUPER_ADMIN"
    },
    {
      userId: procurementManager.id,
      teamId: officeTeam.id,
      role: "PROCUREMENT_MANAGER"
    },
    {
      userId: kitchenManager1.id,
      teamId: officeTeam.id,
      role: "KITCHEN_MANAGER"
    },
    {
      userId: kitchenManager2.id,
      teamId: officeTeam.id,
      role: "KITCHEN_MANAGER"
    },
    {
      userId: kitchenStaff.id,
      teamId: officeTeam.id,
      role: "KITCHEN_STAFF"
    }
  ]);

  console.log("‚úÖ Assigned all users to office team");

  // 7. Create Sample Suppliers
  const sampleSuppliers = await db.insert(suppliers).values([
    {
      supplierCode: "NCC001",
      name: "C√¥ng ty TNHH Th·ª±c Ph·∫©m An To√†n",
      taxId: "0123456789",
      address: "123 ƒê∆∞·ªùng C·∫ßu Gi·∫•y, H√† N·ªôi",
      contactPerson: "Nguy·ªÖn VƒÉn E",
      phone: "0243456789",
      email: "contact@antoancorp.vn"
    },
    {
      supplierCode: "NCC002",
      name: "T·∫≠p ƒêo√†n Th·ª±c Ph·∫©m S·∫°ch",
      taxId: "9876543210",
      address: "456 ƒê∆∞·ªùng L√™ L·ª£i, Qu·∫≠n 1, TP.HCM",
      contactPerson: "Tr·∫ßn Th·ªã F",
      phone: "0287654321",
      email: "info@cleanfood.vn"
    },
    {
      supplierCode: "NCC003",
      name: "C√¥ng ty C·ªï Ph·∫ßn N√¥ng S·∫£n Vi·ªát",
      taxId: "1357924680",
      address: "789 ƒê∆∞·ªùng Ho√†ng VƒÉn Th·ª•, ƒê√† N·∫µng",
      contactPerson: "L√™ VƒÉn G",
      phone: "0236789123",
      email: "sales@nongsanviet.com"
    },
    {
      supplierCode: "NCC004",
      name: "H·ª£p T√°c X√£ N√¥ng Nghi·ªáp H·ªØu C∆°",
      taxId: "2468135790",
      address: "321 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá, C·∫ßn Th∆°",
      contactPerson: "V√µ Th·ªã H",
      phone: "0292456789",
      email: "coop@organic.vn"
    }
  ]).returning();

  console.log("‚úÖ Created sample suppliers");

  // 8. Create Sample Product Categories and Products
  const sampleProducts = await db.insert(products).values([
    // Th·ªãt category
    {
      productCode: "SP001",
      name: "Th·ªãt heo ba ch·ªâ",
      specification: "Th·ªãt heo ba ch·ªâ t∆∞∆°i, kh√¥ng h√≥a ch·∫•t",
      unit: "kg",
      category: "Th·ªãt",
      basePrice: "120000",
      baseQuantity: "100"
    },
    {
      productCode: "SP002",
      name: "Th·ªãt b√≤ thƒÉn",
      specification: "Th·ªãt b√≤ thƒÉn t∆∞∆°i, cao c·∫•p",
      unit: "kg",
      category: "Th·ªãt",
      basePrice: "280000",
      baseQuantity: "50"
    },
    {
      productCode: "SP003",
      name: "Th·ªãt g√† ta",
      specification: "Th·ªãt g√† ta t∆∞∆°i, nu√¥i t·ª± nhi√™n",
      unit: "kg",
      category: "Th·ªãt",
      basePrice: "85000",
      baseQuantity: "80"
    },
    {
      productCode: "SP004",
      name: "Th·ªãt v·ªãt",
      specification: "Th·ªãt v·ªãt t∆∞∆°i, lo·∫°i 1",
      unit: "kg",
      category: "Th·ªãt",
      basePrice: "95000",
      baseQuantity: "60"
    },
    // Rau c·ªß category
    {
      productCode: "SP005",
      name: "C√† chua",
      specification: "C√† chua t∆∞∆°i, lo·∫°i 1",
      unit: "kg",
      category: "Rau c·ªß",
      basePrice: "15000",
      baseQuantity: "200"
    },
    {
      productCode: "SP006",
      name: "H√†nh t√¢y",
      specification: "H√†nh t√¢y t∆∞∆°i, size v·ª´a",
      unit: "kg",
      category: "Rau c·ªß",
      basePrice: "12000",
      baseQuantity: "150"
    },
    {
      productCode: "SP007",
      name: "Rau c·∫£i ng·ªçt",
      specification: "Rau c·∫£i ng·ªçt t∆∞∆°i, h·ªØu c∆°",
      unit: "kg",
      category: "Rau c·ªß",
      basePrice: "8000",
      baseQuantity: "120"
    },
    {
      productCode: "SP008",
      name: "C√† r√≥t",
      specification: "C√† r√≥t t∆∞∆°i, h·ªØu c∆°",
      unit: "kg",
      category: "Rau c·ªß",
      basePrice: "18000",
      baseQuantity: "100"
    },
    {
      productCode: "SP009",
      name: "Khoai t√¢y",
      specification: "Khoai t√¢y ƒê√† L·∫°t, lo·∫°i 1",
      unit: "kg",
      category: "Rau c·ªß",
      basePrice: "20000",
      baseQuantity: "180"
    },
    // Gia v·ªã category
    {
      productCode: "SP010",
      name: "Mu·ªëi bi·ªÉn",
      specification: "Mu·ªëi bi·ªÉn tinh khi·∫øt, bao 1kg",
      unit: "bao",
      category: "Gia v·ªã",
      basePrice: "8000",
      baseQuantity: "100"
    },
    {
      productCode: "SP011",
      name: "N∆∞·ªõc m·∫Øm",
      specification: "N∆∞·ªõc m·∫Øm truy·ªÅn th·ªëng, chai 500ml",
      unit: "chai",
      category: "Gia v·ªã",
      basePrice: "25000",
      baseQuantity: "60"
    },
    {
      productCode: "SP012",
      name: "D·∫ßu ƒÉn",
      specification: "D·∫ßu ƒÉn cao c·∫•p, chai 1L",
      unit: "chai",
      category: "Gia v·ªã",
      basePrice: "45000",
      baseQuantity: "80"
    },
    // H·∫£i s·∫£n category
    {
      productCode: "SP013",
      name: "C√° thu",
      specification: "C√° thu t∆∞∆°i, size 1-2kg/con",
      unit: "kg",
      category: "H·∫£i s·∫£n",
      basePrice: "95000",
      baseQuantity: "40"
    },
    {
      productCode: "SP014",
      name: "T√¥m s√∫",
      specification: "T√¥m s√∫ t∆∞∆°i, size 20-30 con/kg",
      unit: "kg",
      category: "H·∫£i s·∫£n",
      basePrice: "180000",
      baseQuantity: "30"
    },
    {
      productCode: "SP015",
      name: "C√° basa",
      specification: "C√° basa phi l√™, ƒë√¥ng l·∫°nh",
      unit: "kg",
      category: "H·∫£i s·∫£n",
      basePrice: "65000",
      baseQuantity: "70"
    },
    // Ng≈© c·ªëc category
    {
      productCode: "SP016",
      name: "G·∫°o t√°m xoan",
      specification: "G·∫°o t√°m xoan An Giang, bao 25kg",
      unit: "bao",
      category: "Ng≈© c·ªëc",
      basePrice: "850000",
      baseQuantity: "20"
    },
    {
      productCode: "SP017",
      name: "M√¨ s·ª£i",
      specification: "M√¨ s·ª£i t∆∞∆°i, g√≥i 500g",
      unit: "g√≥i",
      category: "Ng≈© c·ªëc",
      basePrice: "8000",
      baseQuantity: "200"
    }
  ]).returning();

  console.log("‚úÖ Created comprehensive product catalog");

  // 9. Create Sample Kitchen Demands for Multiple Periods
  const periods = [
    new Date().toISOString().slice(0, 7) + "-01", // Current month
    new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().slice(0, 7) + "-01", // Last month
    new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().slice(0, 7) + "-01"  // Next month
  ];

  const demands = [];
  const activeKitchens = kitchenTeams.filter(k => k.status === 'active');

  for (const period of periods) {
    for (const kitchen of activeKitchens) {
      for (const product of sampleProducts) {
        // Create realistic demand quantities based on product type and kitchen
        let demandMultiplier = 1;

        // Kitchen size factors
        if (kitchen.kitchenCode === "BEP001") demandMultiplier = 1.5; // Central kitchen - largest
        if (kitchen.kitchenCode === "BEP002") demandMultiplier = 1.2; // Thu Duc - large
        if (kitchen.kitchenCode === "BEP003") demandMultiplier = 1.0; // Tan Binh - medium
        if (kitchen.kitchenCode === "BEP004") demandMultiplier = 0.8; // Quan 7 - smaller (no manager)
        if (kitchen.kitchenCode === "BEP006") demandMultiplier = 0.9; // Go Vap - medium-small

        // Vary quantities by category
        let baseQuantity = parseFloat(product.baseQuantity || "50");
        if (product.category === "Th·ªãt") baseQuantity = baseQuantity * 0.6; // Less meat needed
        if (product.category === "Rau c·ªß") baseQuantity = baseQuantity * 1.2; // More vegetables
        if (product.category === "Gia v·ªã") baseQuantity = baseQuantity * 0.3; // Less spices
        if (product.category === "H·∫£i s·∫£n") baseQuantity = baseQuantity * 0.4; // Less seafood
        if (product.category === "Ng≈© c·ªëc") baseQuantity = baseQuantity * 0.7; // Moderate grains

        // Add some randomness for realism
        const randomFactor = 0.8 + (Math.random() * 0.4); // 0.8 to 1.2
        const finalQuantity = (baseQuantity * demandMultiplier * randomFactor).toFixed(2);

        demands.push({
          teamId: kitchen.id,
          productId: product.id,
          period: period,
          quantity: finalQuantity,
          unit: product.unit,
          notes: `Nhu c·∫ßu ${period} cho ${kitchen.name}`,
          createdBy: kitchen.managerId || superAdmin.id
        });
      }
    }
  }

  await db.insert(kitchenPeriodDemands).values(demands);
  console.log("‚úÖ Created comprehensive kitchen demands for multiple periods");

  // 10. Log initial activities for different users
  await db.insert(activityLogs).values([
    {
      teamId: officeTeam.id,
      userId: superAdmin.id,
      action: "SEED_DATABASE",
      ipAddress: "127.0.0.1"
    },
    {
      teamId: kitchenTeams[0].id,
      userId: kitchenManager1.id,
      action: "ASSIGN_MANAGER",
      ipAddress: "127.0.0.1"
    },
    {
      teamId: kitchenTeams[1].id,
      userId: kitchenManager2.id,
      action: "ASSIGN_MANAGER",
      ipAddress: "127.0.0.1"
    }
  ]);

  console.log("‚úÖ Created activity logs");

  // 11. Summary of what was created
  console.log("\nüìä SEEDING SUMMARY:");
  console.log(`   üë• Users: 5 total`);
  console.log(`      - 1 Super Admin (owner)`);
  console.log(`      - 1 Procurement Manager`);
  console.log(`      - 2 Kitchen Managers`);
  console.log(`      - 1 Kitchen Staff`);
  console.log(`   üè¢ Teams: 7 total`);
  console.log(`      - 1 Office team`);
  console.log(`      - 6 Kitchen teams (5 active, 1 inactive)`);
  console.log(`   üåç Regions: 6 total`);
  console.log(`      - Trung T√¢m, Th·ªß ƒê·ª©c, T√¢n B√¨nh, Qu·∫≠n 7, B√¨nh Th·∫°nh, G√≤ V·∫•p`);
  console.log(`   üë®‚Äçüíº Manager Assignments:`);
  console.log(`      - BEP001: Tr·∫ßn Th·ªã B√≠ch (Kitchen Manager)`);
  console.log(`      - BEP002: L√™ VƒÉn C∆∞·ªùng (Kitchen Manager)`);
  console.log(`      - BEP003: Nguy·ªÖn VƒÉn H√πng (Procurement Manager)`);
  console.log(`      - BEP004: NO MANAGER (testing scenario)`);
  console.log(`      - BEP005: Tr·∫ßn Th·ªã B√≠ch (INACTIVE kitchen)`);
  console.log(`      - BEP006: L√™ VƒÉn C∆∞·ªùng (multiple kitchens)`);
  console.log(`   üè™ Suppliers: 4 total`);
  console.log(`   üì¶ Products: 17 total (5 categories)`);
  console.log(`   üìã Demands: ${demands.length} total (3 periods x 5 active kitchens x 17 products)`);

  console.log("\n‚úÖ QuoteMaster Foundation seeding completed!");
}

async function seed() {
  // Execute QuoteMaster foundation seed only
  await seedQuoteMasterFoundation();
  console.log("üéâ QuoteMaster seeding completed successfully!");
}

seed()
  .catch((error) => {
    console.error('Seed process failed:', error);
    process.exit(1);
  })
  .finally(() => {
    console.log('Seed process finished. Exiting...');
    process.exit(0);
  });