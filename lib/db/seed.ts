import { config } from 'dotenv';

// Load environment variables before any other imports
config();

import { db } from './drizzle';
import {
  users,
  teams,
  teamMembers,
  activityLogs,
  suppliers,
  products,
  kitchenPeriodDemands
} from './schema';
import { hashPassword } from '@/lib/auth/session';

// Helper function to generate random Vietnamese names
const firstNames = [
  'Nguy·ªÖn', 'Tr·∫ßn', 'L√™', 'Ph·∫°m', 'Ho√†ng', 'Hu·ª≥nh', 'Phan', 'V≈©', 'V√µ', 'ƒê·∫∑ng',
  'B√πi', 'ƒê·ªó', 'H·ªì', 'Ng√¥', 'D∆∞∆°ng', 'L√Ω', 'ƒêinh', 'Cao', 'Tran', 'L∆∞u'
];

const middleNames = [
  'VƒÉn', 'Th·ªã', 'Minh', 'Ho√†ng', 'Thanh', 'H·∫£i', 'Quang', 'Tu·∫•n', 'C√¥ng', 'ƒê·ª©c',
  'Xu√¢n', 'Thu', 'H√†', 'Kim', 'Lan', 'Mai', 'T√¢m', 'An', 'B·∫£o', 'Kh·∫£i'
];

const lastNames = [
  'Anh', 'B√¨nh', 'C∆∞·ªùng', 'D≈©ng', 'H√πng', 'Khoa', 'Long', 'Minh', 'Nam', 'Ph√∫c',
  'Qu√¢n', 'S∆°n', 'Tu·∫•n', 'V≈©', 'Xu√¢n', 'Y·∫øn', 'Linh', 'H∆∞∆°ng', 'Th·∫£o', 'Vy',
  'Ch√¢u', 'Duy', 'Giang', 'Hi·ªÅn', 'Kh√°nh', 'L√¢m', 'Ph∆∞∆°ng', 'Trang', 'Uy√™n', 'H√≤a'
];

const regions = [
  'Qu·∫≠n 1', 'Qu·∫≠n 2', 'Qu·∫≠n 3', 'Qu·∫≠n 4', 'Qu·∫≠n 5', 'Qu·∫≠n 7', 'Qu·∫≠n 8',
  'Th·ªß ƒê·ª©c', 'T√¢n B√¨nh', 'B√¨nh Th·∫°nh', 'G√≤ V·∫•p', 'Ph√∫ Nhu·∫≠n',
  'H√† N·ªôi', 'ƒê√† N·∫µng', 'C·∫ßn Th∆°', 'V≈©ng T√†u', 'Nha Trang', 'Hu·∫ø'
];

const managerRoles = [
  'kitchen_manager',
  'procurement_manager',
  'admin',
  'manager',
  'super_admin'
];

function generateRandomName(): string {
  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
  const middleName = middleNames[Math.floor(Math.random() * middleNames.length)];
  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
  return `${firstName} ${middleName} ${lastName}`;
}

function generateEmail(name: string, index: number): string {
  const nameParts = name.toLowerCase().split(' ');
  const lastName = nameParts[nameParts.length - 1];
  const firstName = nameParts[1] || nameParts[0];
  return `${lastName}.${firstName}${index}@quotemaster.local`;
}

function generateEmployeeCode(prefix: string, index: number): string {
  return `${prefix}${String(index).padStart(3, '0')}`;
}

function generatePhone(): string {
  const prefix = '09';
  const suffix = Math.floor(Math.random() * 100000000).toString().padStart(8, '0');
  return prefix + suffix;
}

function generateKitchenCode(index: number): string {
  return `BEP${String(index).padStart(3, '0')}`;
}

function generateAddress(region: string): string {
  const streetNumber = Math.floor(Math.random() * 999) + 1;
  const streets = [
    'ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá', 'ƒê∆∞·ªùng L√™ L·ª£i', 'ƒê∆∞·ªùng Tr·∫ßn H∆∞ng ƒê·∫°o', 'ƒê∆∞·ªùng Hai B√† Tr∆∞ng',
    'ƒê∆∞·ªùng V√µ VƒÉn T·∫ßn', 'ƒê∆∞·ªùng C√°ch M·∫°ng Th√°ng 8', 'ƒê∆∞·ªùng ƒêi·ªán Bi√™n Ph·ªß',
    'ƒê∆∞·ªùng Nguy·ªÖn Th·ªã Minh Khai', 'ƒê∆∞·ªùng L√Ω T·ª± Tr·ªçng', 'ƒê∆∞·ªùng Pasteur'
  ];
  const street = streets[Math.floor(Math.random() * streets.length)];
  return `${streetNumber} ${street}, ${region}, TP.HCM`;
}

function getRandomPastDate(): Date {
  const now = new Date();
  const pastMonths = Math.floor(Math.random() * 12) + 1; // 1-12 months ago
  return new Date(now.getFullYear(), now.getMonth() - pastMonths, Math.floor(Math.random() * 28) + 1);
}

async function cleanupExistingData() {
  console.log("üßπ Cleaning up existing data...");

  try {
    // Delete in order of dependencies (child tables first)
    await db.delete(kitchenPeriodDemands);
    await db.delete(activityLogs);
    await db.delete(teamMembers);
    await db.delete(teams);
    await db.delete(users);
    await db.delete(products);
    await db.delete(suppliers);

    console.log("‚úÖ Cleanup completed successfully");
  } catch (error) {
    console.log("‚ö†Ô∏è Cleanup encountered errors (likely empty tables):", error);
  }
}

async function seedLargeQuoteMasterDataset() {
  console.log("üå± Seeding Large QuoteMaster Dataset...");

  // 1. Clean up existing data first
  await cleanupExistingData();

  // 2. Create Super Admin User
  const [superAdmin] = await db.insert(users).values({
    name: "QuoteMaster Admin",
    email: "admin@quotemaster.local",
    passwordHash: await hashPassword("admin123!"),
    employeeCode: "ADMIN001",
    phone: "0901234567",
    role: "owner"
  }).returning();

  console.log("‚úÖ Created super admin user");

  // 3. Generate 15 Manager Users with diverse roles
  const managerUsers = [];
  for (let i = 1; i <= 15; i++) {
    const name = generateRandomName();
    const role = managerRoles[Math.floor(Math.random() * managerRoles.length)];
    const manager = await db.insert(users).values({
      name: name,
      email: generateEmail(name, i),
      passwordHash: await hashPassword("manager123!"),
      employeeCode: generateEmployeeCode("MG", i),
      phone: generatePhone(),
      role: role
    }).returning();

    managerUsers.push(manager[0]);
  }

  console.log(`‚úÖ Created ${managerUsers.length} manager users`);

  // 4. Create Office Team
  const [officeTeam] = await db.insert(teams).values({
    name: "VƒÉn Ph√≤ng Trung T√¢m",
    teamType: "OFFICE",
    region: "Trung T√¢m",
    address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
    managerId: superAdmin.id,
    status: "active"
  }).returning();

  console.log("‚úÖ Created office team");

  // 5. Generate 120 Kitchen Teams with diverse data
  const kitchenTeams = [];
  const kitchenData = [];

  for (let i = 1; i <= 120; i++) {
    // Random assignments
    const randomManager = managerUsers[Math.floor(Math.random() * managerUsers.length)];
    const randomRegion = regions[Math.floor(Math.random() * regions.length)];
    const isActive = Math.random() > 0.15; // 85% active, 15% inactive

    const kitchenRecord = {
      name: `B·∫øp ${randomRegion} ${i}`,
      teamType: "KITCHEN" as const,
      kitchenCode: generateKitchenCode(i),
      region: randomRegion,
      address: generateAddress(randomRegion),
      managerId: randomManager.id,
      status: isActive ? "active" as const : "inactive" as const,
      ...(isActive ? {} : { deletedAt: getRandomPastDate() })
    };

    kitchenData.push(kitchenRecord);
  }

  // Batch insert kitchens for better performance
  const batchSize = 20;
  for (let i = 0; i < kitchenData.length; i += batchSize) {
    const batch = kitchenData.slice(i, i + batchSize);
    const insertedBatch = await db.insert(teams).values(batch).returning();
    kitchenTeams.push(...insertedBatch);
  }

  console.log(`‚úÖ Created ${kitchenTeams.length} diverse kitchen teams`);

  // 6. Assign All Manager Users to Office Team
  const teamMemberData = [
    {
      userId: superAdmin.id,
      teamId: officeTeam.id,
      role: "ADMIN_SUPER_ADMIN"
    },
    ...managerUsers.map(manager => ({
      userId: manager.id,
      teamId: officeTeam.id,
      role: manager.role.toUpperCase().replace('_', '_') as string
    }))
  ];

  await db.insert(teamMembers).values(teamMemberData);

  console.log("‚úÖ Assigned all users to office team");

  // 7. Create Enhanced Suppliers
  const sampleSuppliers = await db.insert(suppliers).values([
    {
      supplierCode: "NCC001",
      name: "C√¥ng ty TNHH Th·ª±c Ph·∫©m An To√†n",
      taxId: "0123456789",
      address: "123 ƒê∆∞·ªùng C·∫ßu Gi·∫•y, H√† N·ªôi",
      contactPerson: "Nguy·ªÖn VƒÉn E",
      phone: "0243456789",
      email: "contact@antoancorp.vn"
    },
    {
      supplierCode: "NCC002",
      name: "T·∫≠p ƒêo√†n Th·ª±c Ph·∫©m S·∫°ch",
      taxId: "9876543210",
      address: "456 ƒê∆∞·ªùng L√™ L·ª£i, Qu·∫≠n 1, TP.HCM",
      contactPerson: "Tr·∫ßn Th·ªã F",
      phone: "0287654321",
      email: "info@cleanfood.vn"
    },
    {
      supplierCode: "NCC003",
      name: "C√¥ng ty C·ªï Ph·∫ßn N√¥ng S·∫£n Vi·ªát",
      taxId: "1357924680",
      address: "789 ƒê∆∞·ªùng Ho√†ng VƒÉn Th·ª•, ƒê√† N·∫µng",
      contactPerson: "L√™ VƒÉn G",
      phone: "0236789123",
      email: "sales@nongsanviet.com"
    },
    {
      supplierCode: "NCC004",
      name: "H·ª£p T√°c X√£ N√¥ng Nghi·ªáp H·ªØu C∆°",
      taxId: "2468135790",
      address: "321 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá, C·∫ßn Th∆°",
      contactPerson: "V√µ Th·ªã H",
      phone: "0292456789",
      email: "coop@organic.vn"
    },
    {
      supplierCode: "NCC005",
      name: "C√¥ng ty Th·ª±c Ph·∫©m S√†i G√≤n",
      taxId: "5432167890",
      address: "555 ƒê∆∞·ªùng Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP.HCM",
      contactPerson: "ƒê·∫∑ng VƒÉn I",
      phone: "0283456789",
      email: "saigonfood@supplier.vn"
    },
    {
      supplierCode: "NCC006",
      name: "Nh√† Ph√¢n Ph·ªëi Th·ª±c Ph·∫©m Mi·ªÅn B·∫Øc",
      taxId: "6789012345",
      address: "888 ƒê∆∞·ªùng Gi·∫£i Ph√≥ng, H√† N·ªôi",
      contactPerson: "B√πi Th·ªã K",
      phone: "0244567890",
      email: "northfood@supplier.vn"
    }
  ]).returning();

  console.log("‚úÖ Created enhanced supplier catalog");

  // 8. Create Comprehensive Product Catalog
  const sampleProducts = await db.insert(products).values([
    // Th·ªãt category (8 products)
    {
      productCode: "SP001", name: "Th·ªãt heo ba ch·ªâ", specification: "Th·ªãt heo ba ch·ªâ t∆∞∆°i, kh√¥ng h√≥a ch·∫•t",
      unit: "kg", category: "Th·ªãt", basePrice: "120000", baseQuantity: "100"
    },
    {
      productCode: "SP002", name: "Th·ªãt b√≤ thƒÉn", specification: "Th·ªãt b√≤ thƒÉn t∆∞∆°i, cao c·∫•p",
      unit: "kg", category: "Th·ªãt", basePrice: "280000", baseQuantity: "50"
    },
    {
      productCode: "SP003", name: "Th·ªãt g√† ta", specification: "Th·ªãt g√† ta t∆∞∆°i, nu√¥i t·ª± nhi√™n",
      unit: "kg", category: "Th·ªãt", basePrice: "85000", baseQuantity: "80"
    },
    {
      productCode: "SP004", name: "Th·ªãt v·ªãt", specification: "Th·ªãt v·ªãt t∆∞∆°i, lo·∫°i 1",
      unit: "kg", category: "Th·ªãt", basePrice: "95000", baseQuantity: "60"
    },
    {
      productCode: "SP005", name: "Th·ªãt n·∫°c vai heo", specification: "Th·ªãt n·∫°c vai heo t∆∞∆°i",
      unit: "kg", category: "Th·ªãt", basePrice: "140000", baseQuantity: "70"
    },
    {
      productCode: "SP006", name: "Th·ªãt b√≤ xay", specification: "Th·ªãt b√≤ xay t∆∞∆°i, kh√¥ng ch·∫•t b·∫£o qu·∫£n",
      unit: "kg", category: "Th·ªãt", basePrice: "200000", baseQuantity: "40"
    },
    {
      productCode: "SP007", name: "S∆∞·ªùn heo", specification: "S∆∞·ªùn heo t∆∞∆°i, c√≥ x∆∞∆°ng",
      unit: "kg", category: "Th·ªãt", basePrice: "110000", baseQuantity: "60"
    },
    {
      productCode: "SP008", name: "Th·ªãt g√† c√¥ng nghi·ªáp", specification: "Th·ªãt g√† c√¥ng nghi·ªáp, ƒë√¥ng l·∫°nh",
      unit: "kg", category: "Th·ªãt", basePrice: "65000", baseQuantity: "100"
    },

    // Rau c·ªß category (10 products)
    {
      productCode: "SP009", name: "C√† chua", specification: "C√† chua t∆∞∆°i, lo·∫°i 1",
      unit: "kg", category: "Rau c·ªß", basePrice: "15000", baseQuantity: "200"
    },
    {
      productCode: "SP010", name: "H√†nh t√¢y", specification: "H√†nh t√¢y t∆∞∆°i, size v·ª´a",
      unit: "kg", category: "Rau c·ªß", basePrice: "12000", baseQuantity: "150"
    },
    {
      productCode: "SP011", name: "Rau c·∫£i ng·ªçt", specification: "Rau c·∫£i ng·ªçt t∆∞∆°i, h·ªØu c∆°",
      unit: "kg", category: "Rau c·ªß", basePrice: "8000", baseQuantity: "120"
    },
    {
      productCode: "SP012", name: "C√† r√≥t", specification: "C√† r√≥t t∆∞∆°i, h·ªØu c∆°",
      unit: "kg", category: "Rau c·ªß", basePrice: "18000", baseQuantity: "100"
    },
    {
      productCode: "SP013", name: "Khoai t√¢y", specification: "Khoai t√¢y ƒê√† L·∫°t, lo·∫°i 1",
      unit: "kg", category: "Rau c·ªß", basePrice: "20000", baseQuantity: "180"
    },
    {
      productCode: "SP014", name: "C√† r·ªët", specification: "C√† r·ªët ƒê√† L·∫°t, t∆∞∆°i",
      unit: "kg", category: "Rau c·ªß", basePrice: "25000", baseQuantity: "160"
    },
    {
      productCode: "SP015", name: "B·∫Øp c·∫£i", specification: "B·∫Øp c·∫£i t∆∞∆°i, kh√¥ng thu·ªëc tr·ª´ s√¢u",
      unit: "kg", category: "Rau c·ªß", basePrice: "10000", baseQuantity: "140"
    },
    {
      productCode: "SP016", name: "Rau mu·ªëng", specification: "Rau mu·ªëng t∆∞∆°i, h·ªØu c∆°",
      unit: "kg", category: "Rau c·ªß", basePrice: "6000", baseQuantity: "100"
    },
    {
      productCode: "SP017", name: "D∆∞a chu·ªôt", specification: "D∆∞a chu·ªôt t∆∞∆°i, lo·∫°i 1",
      unit: "kg", category: "Rau c·ªß", basePrice: "12000", baseQuantity: "130"
    },
    {
      productCode: "SP018", name: "·ªöt xanh", specification: "·ªöt xanh t∆∞∆°i, cay v·ª´a",
      unit: "kg", category: "Rau c·ªß", basePrice: "30000", baseQuantity: "50"
    },

    // Gia v·ªã category (6 products)
    {
      productCode: "SP019", name: "Mu·ªëi bi·ªÉn", specification: "Mu·ªëi bi·ªÉn tinh khi·∫øt, bao 1kg",
      unit: "bao", category: "Gia v·ªã", basePrice: "8000", baseQuantity: "100"
    },
    {
      productCode: "SP020", name: "N∆∞·ªõc m·∫Øm", specification: "N∆∞·ªõc m·∫Øm truy·ªÅn th·ªëng, chai 500ml",
      unit: "chai", category: "Gia v·ªã", basePrice: "25000", baseQuantity: "60"
    },
    {
      productCode: "SP021", name: "D·∫ßu ƒÉn", specification: "D·∫ßu ƒÉn cao c·∫•p, chai 1L",
      unit: "chai", category: "Gia v·ªã", basePrice: "45000", baseQuantity: "80"
    },
    {
      productCode: "SP022", name: "T∆∞∆°ng ·ªõt", specification: "T∆∞∆°ng ·ªõt Vi·ªát Nam, chai 250ml",
      unit: "chai", category: "Gia v·ªã", basePrice: "18000", baseQuantity: "70"
    },
    {
      productCode: "SP023", name: "B·ªôt ng·ªçt", specification: "B·ªôt ng·ªçt MSG, g√≥i 500g",
      unit: "g√≥i", category: "Gia v·ªã", basePrice: "12000", baseQuantity: "90"
    },
    {
      productCode: "SP024", name: "Ti√™u ƒëen", specification: "Ti√™u ƒëen xay, h·ªôp 100g",
      unit: "h·ªôp", category: "Gia v·ªã", basePrice: "35000", baseQuantity: "40"
    },

    // H·∫£i s·∫£n category (6 products)
    {
      productCode: "SP025", name: "C√° thu", specification: "C√° thu t∆∞∆°i, size 1-2kg/con",
      unit: "kg", category: "H·∫£i s·∫£n", basePrice: "95000", baseQuantity: "40"
    },
    {
      productCode: "SP026", name: "T√¥m s√∫", specification: "T√¥m s√∫ t∆∞∆°i, size 20-30 con/kg",
      unit: "kg", category: "H·∫£i s·∫£n", basePrice: "180000", baseQuantity: "30"
    },
    {
      productCode: "SP027", name: "C√° basa", specification: "C√° basa phi l√™, ƒë√¥ng l·∫°nh",
      unit: "kg", category: "H·∫£i s·∫£n", basePrice: "65000", baseQuantity: "70"
    },
    {
      productCode: "SP028", name: "M·ª±c ·ªëng", specification: "M·ª±c ·ªëng t∆∞∆°i, lo·∫°i 1",
      unit: "kg", category: "H·∫£i s·∫£n", basePrice: "120000", baseQuantity: "35"
    },
    {
      productCode: "SP029", name: "C√° h·ªìi", specification: "C√° h·ªìi phi l√™, nh·∫≠p kh·∫©u",
      unit: "kg", category: "H·∫£i s·∫£n", basePrice: "320000", baseQuantity: "20"
    },
    {
      productCode: "SP030", name: "T√¥m th·∫ª", specification: "T√¥m th·∫ª t∆∞∆°i, size nh·ªè",
      unit: "kg", category: "H·∫£i s·∫£n", basePrice: "140000", baseQuantity: "40"
    },

    // Ng≈© c·ªëc category (5 products)
    {
      productCode: "SP031", name: "G·∫°o t√°m xoan", specification: "G·∫°o t√°m xoan An Giang, bao 25kg",
      unit: "bao", category: "Ng≈© c·ªëc", basePrice: "850000", baseQuantity: "20"
    },
    {
      productCode: "SP032", name: "M√¨ s·ª£i", specification: "M√¨ s·ª£i t∆∞∆°i, g√≥i 500g",
      unit: "g√≥i", category: "Ng≈© c·ªëc", basePrice: "8000", baseQuantity: "200"
    },
    {
      productCode: "SP033", name: "B√∫n t∆∞∆°i", specification: "B√∫n t∆∞∆°i, g√≥i 500g",
      unit: "g√≥i", category: "Ng≈© c·ªëc", basePrice: "7000", baseQuantity: "180"
    },
    {
      productCode: "SP034", name: "B√°nh ph·ªü", specification: "B√°nh ph·ªü t∆∞∆°i, g√≥i 1kg",
      unit: "g√≥i", category: "Ng≈© c·ªëc", basePrice: "15000", baseQuantity: "100"
    },
    {
      productCode: "SP035", name: "G·∫°o n·∫øp", specification: "G·∫°o n·∫øp th∆°m, bao 10kg",
      unit: "bao", category: "Ng≈© c·ªëc", basePrice: "400000", baseQuantity: "15"
    }
  ]).returning();

  console.log("‚úÖ Created comprehensive product catalog (35 products)");

  // 9. Create Sample Kitchen Demands (only for active kitchens)
  const currentPeriod = new Date().toISOString().slice(0, 7) + "-01";
  const activeKitchens = kitchenTeams.filter(k => k.status === 'active');

  console.log(`üîÑ Creating demands for ${activeKitchens.length} active kitchens...`);

  const demands = [];
  let demandCounter = 0;

  // Create demands in smaller batches to avoid memory issues
  for (const kitchen of activeKitchens) {
    for (const product of sampleProducts) {
      // Create realistic demand quantities
      let baseQuantity = parseFloat(product.baseQuantity || "50");

      // Adjust by category
      if (product.category === "Th·ªãt") baseQuantity = baseQuantity * 0.6;
      if (product.category === "Rau c·ªß") baseQuantity = baseQuantity * 1.2;
      if (product.category === "Gia v·ªã") baseQuantity = baseQuantity * 0.3;
      if (product.category === "H·∫£i s·∫£n") baseQuantity = baseQuantity * 0.4;
      if (product.category === "Ng≈© c·ªëc") baseQuantity = baseQuantity * 0.7;

      // Add randomness
      const randomFactor = 0.5 + (Math.random() * 1.0); // 0.5 to 1.5
      const finalQuantity = (baseQuantity * randomFactor).toFixed(2);

      demands.push({
        teamId: kitchen.id,
        productId: product.id,
        period: currentPeriod,
        quantity: finalQuantity,
        unit: product.unit,
        notes: `Nhu c·∫ßu ${currentPeriod} cho ${kitchen.name}`,
        createdBy: kitchen.managerId || superAdmin.id
      });

      demandCounter++;
    }
  }

  // Insert demands in batches
  const demandBatchSize = 100;
  for (let i = 0; i < demands.length; i += demandBatchSize) {
    const batch = demands.slice(i, i + demandBatchSize);
    await db.insert(kitchenPeriodDemands).values(batch);
  }

  console.log(`‚úÖ Created ${demands.length} kitchen demands`);

  // 10. Create Activity Logs
  await db.insert(activityLogs).values([
    {
      teamId: officeTeam.id,
      userId: superAdmin.id,
      action: "SEED_DATABASE",
      ipAddress: "127.0.0.1"
    },
    {
      teamId: kitchenTeams[0]?.id || officeTeam.id,
      userId: managerUsers[0]?.id || superAdmin.id,
      action: "ASSIGN_MANAGER",
      ipAddress: "127.0.0.1"
    }
  ]);

  console.log("‚úÖ Created activity logs");

  // 11. Summary Statistics
  const activeKitchenCount = kitchenTeams.filter(k => k.status === 'active').length;
  const inactiveKitchenCount = kitchenTeams.filter(k => k.status === 'inactive').length;
  const regionStats = regions.map(region => ({
    region,
    count: kitchenTeams.filter(k => k.region === region).length
  }));

  console.log("\nüìä LARGE DATASET SEEDING SUMMARY:");
  console.log(`   üë• Users: ${managerUsers.length + 1} total`);
  console.log(`      - 1 Super Admin (owner)`);
  console.log(`      - ${managerUsers.length} Manager Users (diverse roles)`);
  console.log(`   üè¢ Teams: ${kitchenTeams.length + 1} total`);
  console.log(`      - 1 Office team`);
  console.log(`      - ${kitchenTeams.length} Kitchen teams (${activeKitchenCount} active, ${inactiveKitchenCount} inactive)`);
  console.log(`   üåç Region Distribution:`);
  regionStats.forEach(stat => {
    if (stat.count > 0) {
      console.log(`      - ${stat.region}: ${stat.count} kitchens`);
    }
  });
  console.log(`   üè™ Suppliers: ${sampleSuppliers.length} total`);
  console.log(`   üì¶ Products: ${sampleProducts.length} total (5 categories)`);
  console.log(`   üìã Demands: ${demands.length} total (${activeKitchenCount} active kitchens √ó ${sampleProducts.length} products)`);

  console.log("\n‚úÖ Large QuoteMaster Dataset seeding completed!");
}

async function seed() {
  await seedLargeQuoteMasterDataset();
  console.log("üéâ Large-scale QuoteMaster seeding completed successfully!");
}

seed()
  .catch((error) => {
    console.error('Seed process failed:', error);
    process.exit(1);
  })
  .finally(() => {
    console.log('Seed process finished. Exiting...');
    process.exit(0);
  });